;AlexL@2019
;XpressKeys made by Alexandre Rodrigues Lopes
;http://alexcrafter.blogspot.com/
;#################################################################################
;add an image button
;button images must be inside the "image" folder.
;#################################################################################
AddImgButton(n,px,py,w,h,xid,ref_up,ref_on,ref_dn)
{
	;n is the Gui number
	;px and py for image position
	;w and h for image size
	;xid for the button reference identifier
	;ref_up, ref_on and ref_dn for the images file name
	
	global									;for use with the DoNothing g.label function
	
	;load the three images for the button // +altsubmit not used, only +BackgroundTrans
	Gui, %n%:Add, Picture, +BackgroundTrans x%px% y%py% w%w% h%h% gDoNothing v%xid%_up hwnd%xid%_up_hwnd, %a_ScriptDir%\images\%ref_up%
	Gui, %n%:Add, Picture, +BackgroundTrans x%px% y%py% w%w% h%h% gDoNothing v%xid%_on hwnd%xid%_on_hwnd, %a_ScriptDir%\images\%ref_on%
	Gui, %n%:Add, Picture, +BackgroundTrans x%px% y%py% w%w% h%h% gDoNothing v%xid%_dn hwnd%xid%_dn_hwnd, %a_ScriptDir%\images\%ref_dn%
	
	;hide over and down buttons
	GuiControl, %n%:Hide, %xid%_on
	GuiControl, %n%:Hide, %xid%_dn
}
;#################################################################################

;#################################################################################
;Mouse movement
;#################################################################################
;---------------------------------------------------------------------------------
;generic listener function
;---------------------------------------------------------------------------------
MouseMove()
{
	;............................................................................
	global gui_id
	global guiKeyboard_id
	;............................................................................
	;identify which gui is being interacted with
	MouseGetPos,,, winId
	;............................................................................
	;depending on the active Gui, calls the respective function
	switch A_Gui
	{
		case 2:
			;it's the main Gui
			MainGui_MouseMove()
		case 3:
			;it's the keyboard Gui
			GuiKeyboard_MouseMove()
		default:
	}
	;............................................................................
}
;---------------------------------------------------------------------------------

;---------------------------------------------------------------------------------
;function that manages mouse movement on the Mai Gui
;---------------------------------------------------------------------------------
MainGui_MouseMove()
{
	;............................................................................
	global lastbt			;keeps the last interacted control image ref to know if the mouse left that button
	global TooltipArr		;Object with tooltip labels
	;............................................................................
	
	;............................................................................
	;separate the control name in the underscore, so you get the button reference id, and the button state also
	xcontrol:=A_GuiControl							;get the interacted control
	idArray := StrSplit(xcontrol, "_")				;split the string in the "_" character
	idbt:=idArray[1]								;button Id is in the first slot
	idmod:=idArray[2]								;button modifier is in the second slot
	;............................................................................

	;............................................................................
	;selective actions for tooltips
	TooltipLbl:=TooltipArr[idbt]
	Tooltip %TooltipLbl%
	;............................................................................
	
	;............................................................................
	;show/hide the button images required to simulate "mouse over button"
	switch idmod
	{
		case "up":
			GuiControl, %A_Gui%:Hide, %idbt%_up
			GuiControl, %A_Gui%:Hide, %idbt%_dn
			GuiControl, %A_Gui%:Show, %idbt%_on
			
		case "on","dn":
		default:
		GuiDrag_do()
	}
	
	;if the last interacted button has changed, then change that old button image to default
	if(idbt!=lastbt)
	{
		GuiControl, %A_Gui%:Hide, %lastbt%_on
		GuiControl, %A_Gui%:Hide, %lastbt%_dn
		GuiControl, %A_Gui%:Show, %lastbt%_up
			
		lastbt:=idbt
	}
	;............................................................................
	
}
;---------------------------------------------------------------------------------
;#################################################################################

;#################################################################################
;listener for mouse press
;#################################################################################
;---------------------------------------------------------------------------------
;generic listener
;---------------------------------------------------------------------------------
MouseLDown()
{
	;............................................................................
	;A_Gui gives reference to the active Gui
	;............................................................................
	switch A_Gui
	{
		case 2:
			;it's the main Gui
			MainGui_MouseLDown()
		case 3:
			;it's the keyboard Gui
			GuiKeyboard_MouseLDown()
		default:
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;---------------------------------------------------------------------------------
;Mouse press function for the main Gui
;---------------------------------------------------------------------------------
MainGui_MouseLDown()
{
	;............................................................................
	;separate the control name in the underscore, so you get the button reference id, and the button state also
	xcontrol:=A_GuiControl		;get the interacted control
	idArray := StrSplit(xcontrol, "_")
	idbt:=idArray[1]
	idmod:=idArray[2]
	;............................................................................
	
	;............................................................................
	;show/hide the button images
	switch idmod
	{
		case "on":
			GuiControl, %A_Gui%:Hide, %idbt%_on
			GuiControl, %A_Gui%:Hide, %idbt%_up
			GuiControl, %A_Gui%:Show, %idbt%_dn
		case "up","dn":
		default:
		;mouse pressed inside the gui, but not in any button. Gui drag considered
		GuiDrag_on()
	}
	;............................................................................
	
}
;---------------------------------------------------------------------------------
;#################################################################################

;#################################################################################
;listener for mouse up
;#################################################################################
;---------------------------------------------------------------------------------
;generic listener for mouse left button up
;---------------------------------------------------------------------------------
MouseLUp()
{
	;............................................................................
	;identify which gui is being interacted with
	switch A_Gui
	{
		case 2:
			;it's the main Gui
			MainGui_MouseLUp()
		case 3:
			;it's the keyboard Gui
			GuiKeyboard_MouseLUp()
		default:
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;---------------------------------------------------------------------------------
;Mouse up function for the main Gui
;---------------------------------------------------------------------------------
MainGui_MouseLUp()
{
	;............................................................................
	;separate the control name in the underscore, so you get the button reference id, and the button state also
	xcontrol:=A_GuiControl		;get the interacted control
	idArray := StrSplit(xcontrol, "_")
	idbt:=idArray[1]
	idmod:=idArray[2]
	;............................................................................
	
	;............................................................................
	;deactivate gui drag, in case it was active
	GuiDrag_off()
	;............................................................................
	
	;............................................................................
	;show/hide the button images
	switch idmod
	{
		case "dn":
			GuiControl, %A_Gui%:Hide, %idbt%_up
			GuiControl, %A_Gui%:Hide, %idbt%_dn
			GuiControl, %A_Gui%:Show, %idbt%_on
			
			BtAction(idbt)		;call the function that executes this button action
		case "up","on":
		default:
	}
	;............................................................................
	
}
;---------------------------------------------------------------------------------
;#################################################################################

;#################################################################################
;Gui drag procedures
;#################################################################################
;---------------------------------------------------------------------------------
;activates gui drag
;---------------------------------------------------------------------------------
GuiDrag_on()
{
	;............................................................................
	global gui_dragx			;mouse x position for gui drag
	global gui_dragy			;mouse y position for gui drag
	global gui_drag				;boolean for gui drag
	;............................................................................
	
	;............................................................................
	;if there's no drag yet, register the offset distance between mouse and main Gui.
	;that will be the value to adjust when mouse moves around, to simulate drag.
	if (!gui_drag)
	{
		gui_drag:=true					;boolean to point that drag is active
		CoordMode, Mouse, Screen 		;Set mouse Coordinates relative to the desktop (entire screen)
		MouseGetPos, px, py				;get mouse position
		WinGetPos, guix, guiy,			;get active window position
		gui_dragx:=px-guix				;offset x position
		gui_dragy:=py-guiy				;offset y position
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;---------------------------------------------------------------------------------
;does gui drag
;---------------------------------------------------------------------------------
GuiDrag_do()
{
	;............................................................................
	global gui_dragx			;mouse x position for gui drag
	global gui_dragy			;mouse y position for gui drag
	global gui_drag				;boolean for gui drag
	;............................................................................
	
	;............................................................................
	;only updates gui position if drag is active
	if (gui_drag)
	{
		CoordMode, Mouse, Screen 			; Coordinates are relative to the desktop (entire screen)
		MouseGetPos, px, py					;get mouse position
		newx:=px-gui_dragx					;use the offset value to correct gui position
		newy:=py-gui_dragy					;same for y
		WinMove, newx,newy					;move the gui window
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;---------------------------------------------------------------------------------
;stops gui drag
;---------------------------------------------------------------------------------
GuiDrag_off()
{
	;............................................................................
	global gui_dragx			;mouse x position for gui drag
	global gui_dragy			;mouse y position for gui drag
	global gui_drag				;boolean for gui drag
	;............................................................................
	
	;............................................................................
	;to stop the drag, simply change the boolean value of the gui_drag variable
	if (gui_drag)
	{
		gui_drag:=false
		gui_dragx:=0
		gui_dragy:=0
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;#################################################################################