;AlexL@2019
;XpressKeys made by Alexandre Rodrigues Lopes
;http://alexcrafter.blogspot.com/
;#################################################################################
;builds a separate Gui that simulates a full keyboard input
;#################################################################################
GuiKeyboard_maker(n){

	;.......................................................................................
	;gui colors,size, and position
	gui_color:=000000	;Background Color
	gui_tcolor:=ffffff	;Font Color
	gui_w:=580			;width
	gui_h:=240			;Height
	gui_posy:= A_ScreenHeight-gui_h	;vertical position for the Gui
	Gui, %n%:Color, %gui_color%
	
	Gui, %n%: -dpiscale
	;.......................................................................................
	
	;.......................................................................................
	;gui background
	Gui, %n%:Add, Picture, +BackgroundTrans x0 y0 w%gui_w% h%gui_h% +0x4000000, images/keyboard1.png
	;.......................................................................................
	
	;.......................................................................................
	;buttons
	GuiKeyboard_buttons(n)
	;update wich ones are visible or not
	GuiKeyboard_refresh(n,"lo")
	;.......................................................................................
	
	;.......................................................................................
	;gui visual style
	Gui, %n%:-Caption +ToolWindow								;No title bar, No taskbar button
	Gui, %n%:Show, xCenter y%gui_posy% W%gui_w% H%gui_h%		;Show Gui, so it can be manipulated
	
	WinGet xid, ID, A										;Get gui ID for Winset commands
	Winset AlwaysOnTop,ON,ahk_id %xid%						;Keep it always on the top
	
	;WinSet, Transparent, 200, ahk_id %xid%					;Opaque
	WinSet, TransColor, %gui_color% 200, ahk_id %xid%		;transparency color and opacity
	;.......................................................................................
	
	;.......................................................................................
	;hide the keyboard again, since it's supposed to be hidden by default
	Gui, %n%:Hide
	;.......................................................................................
	
	;.......................................................................................
	;returns the keyboard Gui Id
	Return xid
	;.......................................................................................
}
;#################################################################################

;#################################################################################
;buttons for the keyboard
;#################################################################################
;--------------------------------------------------------------------
;creates button sets
;--------------------------------------------------------------------
GuiKeyboard_buttons(n){
	
	;.......................................................................................
	global KeyboardArr
	;.......................................................................................
	
	;.......................................................................................
	;loop through the list and create all butoons
	For idbt, valArr in KeyboardArr{
		GuiKeyboard_addBt(n,valArr[2],valArr[3],valArr[4],valArr[5],idbt,valArr[6],valArr[8])
	}
	;.......................................................................................
}
;--------------------------------------------------------------------
;--------------------------------------------------------------------
;creates each button
;--------------------------------------------------------------------
GuiKeyboard_addBt(n,px,py,w,h,xid,lbl,fsize){

	;.......................................................................................
	global	;for use with the DoNothing g.label function
	;.......................................................................................
	
	;.......................................................................................
	Gui, %n%:Font, s%fsize%					;adjust next font size
	Gui, %n%:Add, Text, center +BackgroundTrans cffffff 0x200 border x%px% y%py% w%w% h%h% gDoNothing v%xid%_dn hwnd%xid%_dn_hwnd, %lbl%
	;.......................................................................................
}
;--------------------------------------------------------------------
;#################################################################################

;#################################################################################
;keyboard listeners
;#################################################################################
;---------------------------------------------------------------------------------
;mouse move function
;---------------------------------------------------------------------------------
GuiKeyboard_MouseMove()
{
	;............................................................................
	global guikeyboard_lastkey
	;............................................................................
	
	;............................................................................
	;separate the control name in the underscore, so you get the button reference id, and the button state also
	xcontrol:=A_GuiControl		;get the interacted control
	idArray := StrSplit(xcontrol, "_")
	idbt:=idArray[1]
	idmod:=idArray[2]
	;............................................................................
	
	;............................................................................
	;in case the last hovered key changed, reset its color
	if(guikeyboard_lastkey!=idbt)
	{
		;change the old button font color to default
		GuiControl, %A_Gui%:+cffffff +Redraw, %guikeyboard_lastkey%_dn
		
		;if the button was hidden, hide it again
		if(!GuiKeyboard_checkBt(guikeyboard_lastkey))
		{
			GuiControl, %A_Gui%:Hide, %guikeyboard_lastkey%_dn
			;msgbox %guikeyboard_lastkey% was hidden
		}
	}
	guikeyboard_lastkey:=idbt
	GuiControl, %A_Gui%:+c996666 +Redraw, %idbt%_dn
	;............................................................................
	
	;............................................................................
	;keyboard drag effect
	switch idmod
	{
		default:
		GuiKeyboardDrag_do()
	}
	
}
;---------------------------------------------------------------------------------

;---------------------------------------------------------------------------------
;mouse down function
;---------------------------------------------------------------------------------
GuiKeyboard_MouseLDown()
{
	;............................................................................
	;separate the control name in the underscore, so you get the button reference id, and the button state also
	xcontrol:=A_GuiControl		;get the interacted control
	idArray := StrSplit(xcontrol, "_")
	idbt:=idArray[1]
	idmod:=idArray[2]
	;............................................................................
	
	;............................................................................
	;actions
	switch idmod
	{
		case "dn":
			;change the font color
			GuiControl, %A_Gui%:+c666666 +Redraw, %idbt%_dn
		case "up","on":
		default:
			;mouse pressed inside the gui, but not in any button. Gui drag considered
			GuiKeyboardDrag_on()
	}
	;............................................................................
	
}
;---------------------------------------------------------------------------------

;---------------------------------------------------------------------------------
;mouse up function
;---------------------------------------------------------------------------------
GuiKeyboard_MouseLUp()
{
	;............................................................................
	;separate the control name in the underscore, so you get the button reference id, and the button state also
	xcontrol:=A_GuiControl		;get the interacted control
	idArray := StrSplit(xcontrol, "_")
	idbt:=idArray[1]
	idmod:=idArray[2]
	;............................................................................
	
	;............................................................................
	;deactivate gui drag, in case it was active
	GuiKeyboardDrag_off()
	;............................................................................
	
	;............................................................................
	;actions
	switch idmod
	{
		case "dn":
			;change the font color
			GuiControl, %A_Gui%:+cffffff +Redraw, %idbt%_dn
			
			;execute action
			GuiKeyboard_action(idbt)		;call the function that executes this button action
		case "up","on":
		default:
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;#################################################################################

;#################################################################################
;actions for pressing a keyboard key
;#################################################################################
GuiKeyboard_action(idbt)
{
	;............................................................................
	global KeyboardArr		;associative array that stores all buttons definitions
	global keyboard_mod		;stores the current mode -- lo: low caps, hi:high caps by capslock, hi1:high caps by shift, sy:symbols
	;............................................................................
	
	;............................................................................
	Gui_focus()			;focus on the target window
	;............................................................................
	
	;............................................................................
	;get the button id, and act accodingly to it
	xval:=KeyboardArr[idbt,1]
	switch xval
	{
		;--------------------------
		;capslock button changes from low caps to high caps and vice-versa
		case "CapsLock":
			if(keyboard_mod="lo")
			{
				Guikeyboard_refresh(A_Gui,"hi")
			}
			else
			{
				Guikeyboard_refresh(A_Gui,"lo")
			}
		;--------------------------
		;--------------------------
		;Shift button changes from low caps to high caps once only, then returns to low
		case "Shift":
			if(keyboard_mod="lo")
			{
				Guikeyboard_refresh(A_Gui,"hi1")
			}
			else
			{
				Guikeyboard_refresh(A_Gui,"lo")
			}
		;--------------------------
		;--------------------------
		;Symbol button changes from low caps to symbols and vice-versa
		case "Symbol":
			if(keyboard_mod="sy")
			{
				Guikeyboard_refresh(A_Gui,"lo")
			}
			else
			{
				Guikeyboard_refresh(A_Gui,"sy")
			}
		;--------------------------
		;--------------------------
		;all of the other buttons
		default:
			;check if the first character is a modifier
			fchar:=SubStr(xval, 1, 1)
			switch fchar
			{
				case "+":								;Shift+key modifier
					StringTrimLeft, nval, xval, 1
					SendInput +{%nval%}
				case "?":								;Alt+Control+key modifier
					StringTrimLeft, nval, xval, 1
					SendInput ^!{%nval%}
				default:								;plain key
					SendInput {%xval%}
			}
			
			;if keyboard mode is temporary high, just turn it down to low
			;this is the effect of pressing high caps from the Shift key
			if(keyboard_mod="hi1")
			{
				GuiKeyboard_refresh(A_Gui,"lo")
			}
		;--------------------------
	}
	;............................................................................
}
;#################################################################################

;#################################################################################
;refresher for keyboard keys
;#################################################################################
;changes the keyboard mode and shows only the keys related to that mode
GuiKeyboard_refresh(n,xval)
{
	;............................................................................
	global KeyboardArr		;associative array that stores all buttons definitions
	global keyboard_mod		;stores the current mode -- lo: low caps, hi:high caps by capslock, hi1:high caps by shift, sy:symbols
	;............................................................................
	
	;............................................................................
	;update new mode
	keyboard_mod:=xval
	;............................................................................
	
	;............................................................................
	;loop through the buttons, and hide all but the ones for the mode
	For idbt, valArr in KeyboardArr{
		btmode:=valArr[7]
		switch btmode
		{
			;--------------------------
			;static buttons are always on, so just ignore them
			case "st":
			;--------------------------
			;--------------------------
			;hilo buttons are on low and high caps, but are off on symbols
			case "hilo":
				if(xval="lo" or xval="hi" or xval="hi1")
				{
					GuiControl, %n%:Show, %idbt%_dn
				}
				else
				{
					GuiControl, %n%:Hide, %idbt%_dn
				}
			;--------------------------
			;--------------------------
			;low caps. Only visible if mode is "lo"
			case "lo":
				if(xval="lo")
				{
					GuiControl, %n%:Show, %idbt%_dn
				}
				else
				{
					GuiControl, %n%:Hide, %idbt%_dn
				}
			;--------------------------
			;--------------------------
			;high caps. Only visible if mode is "hi" or "hi1"
			case "hi":
				if(xval="hi" or xval="hi1")
				{
					GuiControl, %n%:Show, %idbt%_dn
				}
				else
				{
					GuiControl, %n%:Hide, %idbt%_dn
				}
			;--------------------------
			;symbols. Only visible if mode is "sy"
			case "sy":
				if(xval="sy")
				{
					GuiControl, %n%:Show, %idbt%_dn
				}
				else
				{
					GuiControl, %n%:Hide, %idbt%_dn
				}
			;--------------------------
			;not supposed to happen, so... error message, just in case ;)
			default:
				msgbox error updating buttons %idbt% -- %btmode% -- %xval%
			;--------------------------
		}
	}
	;............................................................................
}
;#################################################################################

;#################################################################################
;returns validity of a button according to keyboard mode
;#################################################################################
GuiKeyboard_checkBt(idbt)
{
	;............................................................................
	global KeyboardArr		;associative array that stores all buttons definitions
	global keyboard_mod		;stores the current mode -- lo: low caps, hi:high caps by capslock, hi1:high caps by shift, sy:symbols
	;............................................................................
	
	;............................................................................
	xkey:=KeyboardArr[idbt]							;get values of the button, using its Id
	xval:=xkey[7]									;slot 7 stores the button visible mode
	xret:=false										;sets return value to false by default
	;............................................................................
	;............................................................................
	;According to the button's mode, decide if it should be visible or not
	switch xval
	{
		case "hilo":
			if(keyboard_mod="hi" or keyboard_mod="hi1" or keyboard_mod="lo")
			{
				xret=true
			}
		case "lo":
			if(keyboard_mod="lo")
			{
				xret=true
			}
		case "hi":
			if(keyboard_mod="hi" or keyboard_mod="hi1")
			{
				xret=true
			}
		case "sy":
			if(keyboard_mod="sy")
			{
				xret=true
			}
		case "st":
				xret=true
		default:
	}
	;............................................................................
	;............................................................................
	;return the evaluated boolean result
	return xret
	;............................................................................
}
;#################################################################################

;#################################################################################
;gui keyboard operation
;#################################################################################
;-------------------------------------------------------------------------
;show Keyboard Gui
GuiKeyboard_show(n){

	Gui, %n%:Show,
	
	/*
	gui_w:=580			;width
	gui_h:=240			;Height
	gui_posy:= A_ScreenHeight-gui_h	;vertical position for the Gui
	
	Gui, %n%:Show, xCenter y%gui_posy%
	*/
		
	return
}
;-------------------------------------------------------------------------
;-------------------------------------------------------------------------
;hide Keyboard Gui
GuiKeyboard_hide(n){
	
	Gui, %n%:Hide

	return
}
;-------------------------------------------------------------------------
;#################################################################################

;#################################################################################
;keyboard drag procedures
;#################################################################################
;---------------------------------------------------------------------------------
;activates keyboard drag
;---------------------------------------------------------------------------------
GuiKeyboardDrag_on()
{
	;............................................................................
	global guikeyboard_dragx			;mouse x position for gui drag
	global guikeyboard_dragy			;mouse y position for gui drag
	global guikeyboard_drag				;boolean for gui drag
	;............................................................................
	
	;............................................................................
	;if there's no drag yet, register the offset distance between mouse and main Gui.
	;that will be the value to adjust when mouse moves around, to simulate drag.
	if (!guikeyboard_drag)
	{
		guikeyboard_drag:=true					;boolean to point that drag is active
		CoordMode, Mouse, Screen 		;Set mouse Coordinates relative to the desktop (entire screen)
		MouseGetPos, px, py				;get mouse position
		WinGetPos, guix, guiy,			;get active window position
		guikeyboard_dragx:=px-guix				;offset x position
		guikeyboard_dragy:=py-guiy				;offset y position
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;---------------------------------------------------------------------------------
;does gui drag
;---------------------------------------------------------------------------------
GuiKeyboardDrag_do()
{
	;............................................................................
	global guikeyboard_dragx			;mouse x position for gui drag
	global guikeyboard_dragy			;mouse y position for gui drag
	global guikeyboard_drag				;boolean for gui drag
	;............................................................................
	
	;............................................................................
	;only updates gui position if drag is active
	if (guikeyboard_drag)
	{
		CoordMode, Mouse, Screen 			; Coordinates are relative to the desktop (entire screen)
		MouseGetPos, px, py					;get mouse position
		newx:=px-guikeyboard_dragx					;use the offset value to correct gui position
		newy:=py-guikeyboard_dragy					;same for y
		WinMove, newx,newy					;move the gui window
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;---------------------------------------------------------------------------------
;stops gui drag
;---------------------------------------------------------------------------------
GuiKeyboardDrag_off()
{
	;............................................................................
	global guikeyboard_dragx			;mouse x position for gui drag
	global guikeyboard_dragy			;mouse y position for gui drag
	global guikeyboard_drag				;boolean for gui drag
	;............................................................................
	
	;............................................................................
	;to stop the drag, simply change the boolean value of the gui_drag variable
	if (guikeyboard_drag)
	{
		guikeyboard_drag:=false
		guikeyboard_dragx:=0
		guikeyboard_dragy:=0
	}
	;............................................................................
}
;---------------------------------------------------------------------------------
;#################################################################################