;AlexL@2019
;XpressKeys made by Alexandre Rodrigues Lopes
;http://alexcrafter.blogspot.com/
;########################################################
;universal function to manage button press
;uses the static control id as reference to know what button is pressed
;########################################################
BtAction(idbt){
	
	global btIsPressed
	global xactive
	global xactive_class
	
	global gui_id
	global guiKeyboard_id
	global guiKeyboard_on
	
	;-------------------------------------------------------------------------
	Gui_focus()			;focus on the target window
	;-------------------------------------------------------------------------
	
	;-------------------------------------------------------------------------
	;this would be the ideal system, to use a controlsend without reactivating the window,
	;but many windows without ClassNN will not react to it
	
	;msgbox active process: %xactive% -active classNN: %xactive_class%
	;ControlSend, %xactive_class%,{z},ahk_exe %xactive%
	;-------------------------------------------------------------------------
	
	;-------------------------------------------------------------------------
	;switch is the best visual way to deal with different actions, and different behaviours
	Switch idbt
	{
		;---------------------------------
		;brush button
		Case "btbrush":
			Gui_hideAll()
			SendInput {d}
		;---------------------------------
		;eraser
		Case "bteraser":
			Gui_hideAll()
			SendInput {z}
		;---------------------------------
		;color picker
		Case "btedrop":
			Gui_hideAll()
			SendInput {w}
		;---------------------------------
		;select object mode
		Case "btselect":
			Gui_hideAll()
			SendInput {s}
		;---------------------------------
		;ink fill
		Case "btfill":
			Gui_hideAll()
			SendInput {a}
		;---------------------------------
		
		;---------------------------------
		;select object's polygon nodes
		Case "btpolynodes":
			Gui_hideAll()
			SendInput {p}
		;---------------------------------
		;polygon tool
		Case "btpoly":
			Gui_hideAll()
			SendInput {o}
		;---------------------------------
		;node curvature
		Case "btpolycurve":
			Gui_hideAll()
			SendInput {i}
		;---------------------------------
		;add node
		Case "btpolyadd":
			Gui_hideAll()
			SendInput {u}
		;---------------------------------
		;delete node
		Case "btpolyminus":
			Gui_hideAll()
			SendInput {y}
		;---------------------------------
		
		;---------------------------------
		;zoom in
		Case "btzoomin":
			SendInput {f2}
		;---------------------------------
		;soom out
		Case "btzoomout":
			SendInput {f1}
		;---------------------------------
		;grab and drag view
		Case "btgrab":
			Gui_hideAll()
			SendInput {space down}
			;it's a persistent effect, it only stops when the mouse is up
			btIsPressed:="space"
			sleep 100
		;---------------------------------
		;increase brush tip
		Case "btbsizeup":
			SendInput {e}
		;---------------------------------
		;decrease brush tip
		Case "btbsizedn":
			SendInput {q}
		;---------------------------------
		
		;---------------------------------
		;undo
		Case "btundo":
			SendInput {Ctrl Down}{z down}
			sleep 100
			SendInput {Ctrl up}{z up}
		;---------------------------------
		;redo
		Case "btredo":
			SendInput {Ctrl Down}{Shift Down}{z down}
			sleep 100
			SendInput {Ctrl up}{Shift Up}{z up}
		;---------------------------------
		
		;---------------------------------
		;Lady Nezumi button actions
		;---------------------------------
		;turn on/off
		Case "btnezuon":
			Gui_hideAll()
			SendInput {LCtrl down}+{Numpad0 down}
			sleep 100
			SendInput {LCtrl up}+{Numpad0 up}
		;---------------------------------
		;pull cursor
		Case "btnezupull":
			Gui_hideAll()
			SendInput {LCtrl down}+{Numpad2 down}
			sleep 100
			SendInput {LCtrl up}+{Numpad2 up}
		;---------------------------------
		;heavy filter
		Case "btnezuheavy":
			Gui_hideAll()
			SendInput {LCtrl down}+{Numpad3 down}
			sleep 100
			SendInput {LCtrl up}+{Numpad3 up}
		;---------------------------------
		;light filter
		Case "btnezulight":
			Gui_hideAll()
			SendInput {LCtrl down}+{Numpad1 down}
			sleep 100
			SendInput {LCtrl up}+{Numpad1 up}
		;---------------------------------
		;parallel lines
		Case "btnezuline":
			SendInput {LCtrl down}+{Numpad4 down}
			sleep 100
			SendInput {LCtrl up}+{Numpad4 up}
		;---------------------------------
		;radials
		Case "btnezurad":
			SendInput {LCtrl down}+{Numpad5 down}
			sleep 100
			SendInput {LCtrl up}+{Numpad5 up}
		;---------------------------------
		;elipse
		Case "btnezulipse":
			SendInput {LCtrl down}+{Numpad6 down}
			sleep 100
			SendInput {LCtrl up}+{Numpad6 up}
		;---------------------------------
		;mode control 1
		Case "btnezu1":
			Gui_hideAll()
			SendInput {left down}
			;it's a persistent effect, it only stops when the mouse is up
			btIsPressed:="left"
			sleep 100
		;---------------------------------
		;mode control 2
		Case "btnezu2":
			Gui_hideAll()
			SendInput {right down}
			;it's a persistent effect, it only stops when the mouse is up
			btIsPressed:="right"
			sleep 100
		;---------------------------------
		;mode control 3
		Case "btnezu3":
			Gui_hideAll()
			SendInput {down down}
			;it's a persistent effect, it only stops when the mouse is up
			btIsPressed:="down"
			sleep 100
		;---------------------------------
		;mode control 4
		Case "btnezu4":
			Gui_hideAll()
			SendInput {up down}
			;it's a persistent effect, it only stops when the mouse is up
			btIsPressed:="up"
			sleep 100
		;---------------------------------
		
		;---------------------------------
		;cursors
		;---------------------------------
		;up
		Case "btkeyup":
			SendInput {up}
		;---------------------------------
		;down
		Case "btkeydown":
			SendInput {down}
		;---------------------------------
		;left
		Case "btkeyleft":
			SendInput {left}
		;---------------------------------
		;right
		Case "btkeyright":
			SendInput {right}
		;---------------------------------
		;---------------------------------
		;up increased
		Case "btkeyup2":
			SendInput {Shift Down}{up down}
			sleep 100
			SendInput {Shift up}{up up}
		;---------------------------------
		;down increased
		Case "btkeydown2":
			SendInput {Shift Down}{down down}
			sleep 100
			SendInput {Shift up}{down up}
		;---------------------------------
		;left increased
		Case "btkeyleft2":
			SendInput {Shift Down}{left down}
			sleep 100
			SendInput {Shift up}{left up}
		;---------------------------------
		;right increased
		Case "btkeyright2":
			SendInput {Shift down}{right down}
			sleep 100
			SendInput {Shift up}{right up}
		;---------------------------------
		
		;---------------------------------
		;virtual keyboard access
		;---------------------------------
		Case "btkeyboard":
			WinGetTitle, checkgui, ahk_id %guiKeyboard_id%
			if(checkgui)
			{
				GuiKeyboard_hide(3)
				guiKeyboard_on:=false
			}
			else
			{
				GuiKeyboard_show(3)
				guiKeyboard_on:=true
				
			}
		;---------------------------------
		
		;---------------------------------
		;others
		;---------------------------------
		Default:
		;---------------------------------
	}
	
	return
}
;-------------------------------------------------------------------------
;########################################################